#!/bin/bash
# Unified brightness control for MacBook Pro M1
# Supports internal display, external Apple displays, and keyboard backlight
# Integrates with existing omarchy-asahi infrastructure

# Source hardware configuration
HARDWARE_CONF="$HOME/.config/omarchy/hardware.conf"
if [[ -f "$HARDWARE_CONF" ]]; then
    source "$HARDWARE_CONF"
else
    echo "Hardware configuration not found. Run hardware detection first:"
    echo "~/.local/share/omarchy/install/config/hardware-detection.sh"
    exit 1
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to control internal display brightness
control_internal_brightness() {
    local action="$1"
    local success=false
    
    if [[ "$BRIGHTNESSCTL_AVAILABLE" == "true" ]]; then
        case "$action" in
            up|raise|+*)
                brightnessctl set +10% >/dev/null 2>&1 && success=true
                ;;
            down|lower|-*)  
                brightnessctl set 10%- >/dev/null 2>&1 && success=true
                ;;
            set)
                local value="$2"
                if [[ -n "$value" ]]; then
                    brightnessctl set "$value%" >/dev/null 2>&1 && success=true
                fi
                ;;
            get)
                if [[ "$INTERNAL_BACKLIGHT" == "true" ]]; then
                    brightnessctl get 2>/dev/null
                    return $?
                fi
                ;;
        esac
    fi
    
    if [[ "$success" == "true" ]]; then
        log_success "Internal brightness $action"
    else
        log_warning "Internal brightness $action failed"
    fi
    
    return $([ "$success" == "true" ] && echo 0 || echo 1)
}

# Function to control external Apple display brightness
control_external_brightness() {
    local action="$1"
    local success=false
    
    if [[ "$ASDCONTROL_AVAILABLE" == "true" ]] && [[ "$EXTERNAL_APPLE_DISPLAY" == "true" ]]; then
        case "$action" in
            up|raise|+*)
                ~/.local/share/omarchy/bin/omarchy-cmd-apple-display-brightness +5000 >/dev/null 2>&1 && success=true
                ;;
            down|lower|-*)
                ~/.local/share/omarchy/bin/omarchy-cmd-apple-display-brightness -5000 >/dev/null 2>&1 && success=true
                ;;
            set)
                local value="$2"
                if [[ -n "$value" ]]; then
                    # Convert percentage to asdcontrol range (0-60000)
                    local asd_value=$((value * 600))
                    sudo asdcontrol --set-brightness "$asd_value" >/dev/null 2>&1 && success=true
                fi
                ;;
            get)
                if [[ "$EXTERNAL_APPLE_DISPLAY" == "true" ]]; then
                    sudo asdcontrol --get-brightness 2>/dev/null | awk '{print int($1/600)}'
                    return $?
                fi
                ;;
        esac
    fi
    
    if [[ "$success" == "true" ]]; then
        log_success "External brightness $action"
    elif [[ "$EXTERNAL_APPLE_DISPLAY" == "true" ]]; then
        log_warning "External brightness $action failed"
    fi
    
    return $([ "$success" == "true" ] && echo 0 || echo 1)
}

# Function to control keyboard backlight
control_keyboard_backlight() {
    local action="$1"
    local success=false
    
    if [[ "$KEYBOARD_BACKLIGHT" == "true" ]] && [[ -n "$KEYBOARD_BACKLIGHT_DEVICE" ]]; then
        local brightness_file="/sys/class/leds/$KEYBOARD_BACKLIGHT_DEVICE/brightness"
        local max_brightness_file="/sys/class/leds/$KEYBOARD_BACKLIGHT_DEVICE/max_brightness"
        
        if [[ -w "$brightness_file" ]] && [[ -r "$max_brightness_file" ]]; then
            local max_brightness=$(cat "$max_brightness_file" 2>/dev/null || echo 255)
            local current_brightness=$(cat "$brightness_file" 2>/dev/null || echo 0)
            
            case "$action" in
                up|raise|+*)
                    local new_brightness=$((current_brightness + max_brightness / 10))
                    [[ $new_brightness -gt $max_brightness ]] && new_brightness=$max_brightness
                    echo "$new_brightness" > "$brightness_file" 2>/dev/null && success=true
                    ;;
                down|lower|-*)
                    local new_brightness=$((current_brightness - max_brightness / 10))
                    [[ $new_brightness -lt 0 ]] && new_brightness=0
                    echo "$new_brightness" > "$brightness_file" 2>/dev/null && success=true
                    ;;
                set)
                    local value="$2"
                    if [[ -n "$value" ]]; then
                        local target_brightness=$((value * max_brightness / 100))
                        echo "$target_brightness" > "$brightness_file" 2>/dev/null && success=true
                    fi
                    ;;
                get)
                    echo $((current_brightness * 100 / max_brightness))
                    return 0
                    ;;
            esac
        fi
    fi
    
    if [[ "$success" == "true" ]]; then
        log_success "Keyboard backlight $action"
    elif [[ "$KEYBOARD_BACKLIGHT" == "true" ]]; then
        log_warning "Keyboard backlight $action failed"
    fi
    
    return $([ "$success" == "true" ] && echo 0 || echo 1)
}

# Function to trigger SwayOSD feedback
trigger_osd() {
    local type="$1"
    
    if [[ "$SWAYOSD_AVAILABLE" == "true" ]]; then
        case "$type" in
            brightness)
                # Use monitor-aware OSD as in existing configuration
                local monitor=$(hyprctl monitors -j 2>/dev/null | jq -r '.[] | select(.focused == true).name' 2>/dev/null || echo "")
                if [[ -n "$monitor" ]]; then
                    swayosd-client --monitor "$monitor" --brightness raise >/dev/null 2>&1 ||
                    swayosd-client --brightness raise >/dev/null 2>&1
                else
                    swayosd-client --brightness raise >/dev/null 2>&1
                fi
                ;;
        esac
    fi
}

# Main brightness control function
control_brightness() {
    local action="$1"
    local value="$2"
    local target="$3"
    
    case "$target" in
        internal|screen|display)
            control_internal_brightness "$action" "$value"
            ;;
        external|apple)
            control_external_brightness "$action" "$value"
            ;;
        keyboard|kbd)
            control_keyboard_backlight "$action" "$value"
            ;;
        all|*)
            # Default: control all available brightness interfaces
            local any_success=false
            
            if [[ "$INTERNAL_BACKLIGHT" == "true" ]]; then
                control_internal_brightness "$action" "$value" && any_success=true
            fi
            
            if [[ "$EXTERNAL_APPLE_DISPLAY" == "true" ]]; then
                control_external_brightness "$action" "$value" && any_success=true
            fi
            
            # Only control keyboard backlight for explicit keyboard actions or when requested
            if [[ "$target" == "all" ]] || [[ "$target" == "keyboard" ]] || [[ "$target" == "kbd" ]]; then
                if [[ "$KEYBOARD_BACKLIGHT" == "true" ]]; then
                    control_keyboard_backlight "$action" "$value" && any_success=true
                fi
            fi
            
            if [[ "$any_success" == "true" ]]; then
                trigger_osd "brightness"
                return 0
            else
                log_error "No brightness controls succeeded"
                return 1
            fi
            ;;
    esac
}

# Function to get current brightness levels
get_brightness_status() {
    echo "=== Brightness Status ==="
    
    if [[ "$INTERNAL_BACKLIGHT" == "true" ]]; then
        local internal=$(control_internal_brightness get 2>/dev/null || echo "N/A")
        echo "Internal display: $internal%"
    fi
    
    if [[ "$EXTERNAL_APPLE_DISPLAY" == "true" ]]; then
        local external=$(control_external_brightness get 2>/dev/null || echo "N/A")
        echo "External Apple display: $external%"
    fi
    
    if [[ "$KEYBOARD_BACKLIGHT" == "true" ]]; then
        local keyboard=$(control_keyboard_backlight get 2>/dev/null || echo "N/A")
        echo "Keyboard backlight: $keyboard%"
    fi
    
    if [[ "$INTERNAL_BACKLIGHT" != "true" ]] && [[ "$EXTERNAL_APPLE_DISPLAY" != "true" ]] && [[ "$KEYBOARD_BACKLIGHT" != "true" ]]; then
        echo "No brightness controls available"
    fi
}

# Usage information
show_usage() {
    cat << EOF
Usage: $(basename "$0") <action> [value] [target]

Actions:
  up, raise, +N     Increase brightness
  down, lower, -N   Decrease brightness  
  set N             Set brightness to N%
  get               Get current brightness
  status            Show all brightness levels
  help              Show this help message

Targets (optional):
  internal, screen, display    Internal display only
  external, apple             External Apple display only
  keyboard, kbd               Keyboard backlight only
  all                         All available controls (default)

Examples:
  $(basename "$0") up                    # Increase all brightness
  $(basename "$0") down keyboard         # Decrease keyboard backlight
  $(basename "$0") set 50 internal       # Set internal display to 50%
  $(basename "$0") status                # Show all brightness levels

Hardware Status:
  Internal backlight: $INTERNAL_BACKLIGHT
  External Apple display: $EXTERNAL_APPLE_DISPLAY  
  Keyboard backlight: $KEYBOARD_BACKLIGHT
  SwayOSD available: $SWAYOSD_AVAILABLE
EOF
}

# Main execution
main() {
    local action="$1"
    local value="$2"
    local target="$3"
    
    case "$action" in
        up|raise|+*)
            control_brightness "up" "$value" "$target"
            ;;
        down|lower|-*)
            control_brightness "down" "$value" "$target"
            ;;
        set)
            if [[ -z "$value" ]]; then
                log_error "Value required for set action"
                show_usage
                exit 1
            fi
            control_brightness "set" "$value" "$target"
            ;;
        get)
            control_brightness "get" "$value" "$target"
            ;;
        status)
            get_brightness_status
            ;;
        help|--help|-h)
            show_usage
            ;;
        "")
            log_error "Action required"
            show_usage
            exit 1
            ;;
        *)
            log_error "Unknown action: $action"
            show_usage
            exit 1
            ;;
    esac
}

# Execute main function with all arguments
main "$@"